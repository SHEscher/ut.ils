# Check this for proper formatting: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
[project]
name = "ut"
version = "0.1.0"
description = "ut.ils comprises utility functions for (research) projects."
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
authors = [
    { name = "Simon M. Hofmann", email = "simon.hofmann@pm.me" },
]
maintainers = [
    { name = "Simon M. Hofmann", email = "simon.hofmann@pm.me" },
]
keywords = ["utility", "helper", "utils"]
# Check for classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "numpy",
    "psutil",
    "requests",
    "toml>=0.10; python_version < '3.11'",
]

[project.optional-dependencies]
develop = [
    "ruff>=0.3.7",
    "tox>=4.11.3",
    "pre-commit>=3.7.0",
    "pytest>=8.1.1",
    "pytest-cov>=5.0.0",
    "python-dotenv==1.0.1",
]

[project.urls]
repository = "https://github.com/SHEscher/ut.ils"

[tool.setuptools]
platforms = ["unix", "linux", "osx", "cygwin", "win32"]
zip-safe = false

# # To automatically find the package(s) (Beta feature (Oct, 2022)):
[tool.setuptools.packages.find]
where = ["src"]
include = ["ut"]
exclude = ["tests"]

# Include non-python files in the package
# [options.package_data]
# ut = ["*.txt", "*.rst"]

# Exclude specific non-python files in the package
# [tool.setuptools.exclude-package-data]
# ut = [".gitattributes"]

# ALL ABOVE IS ADAPTATION OF THE FORMER setup.cfg
# ALL BELOW WAS ALREADY PART OF pyproject.toml [Oct, 2022]

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
#addopts = "--cov=ut"
testpaths = ["src/tests"]

[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html
data_file = "src/tests/.coverage"

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.coverage.html]
directory = "src/tests/coverage_html_report"

[tool.ruff]
# Select rules / linters to apply
lint.select = [   # add /comment-out rules (the list below does not contain all rules)
    # "ALL", # all rules
    "D",  # pydocstyle
    "E", # pycodestyle [default]
    "F",  # Pyflakes [default]
    "I",  # isort imports
    "RUF",  # ruff specific
    "UP",  # pyupgrade [default]
    "W",  # pycodestyle: warning
    "C90", # mccabe
    "N", # pep8-naming
    "ANN", # flake8-annotations (toggle on if you intend to work with type annotations)
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "FA", # flake8-future-annotations (see ANN above)
    "ISC", # flake8-implicit-str-concat
    # "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PL", # Pylint
    "NPY", # NumPy-specific rules
]  # run `ruff linter` to see all rules
fix = false  # true: Ruff will try to fix errors automatically
# List of rules to consider non-autofix-able.
lint.unfixable = [  # either with fix = true or when `ruff . --fix` is executed
    "ERA001",  # found commented-out code
    "F401",  # unused imports
    # "RUF100", # `noqa` directives that are no longer applicable
]
# Ignore specific rules or the whole set of a rule
lint.ignore = [
    "ANN101",  # flake8-annotations: Missing type annotation for self in method
    "ANN102",  # flake8-annotations: Missing type annotation for cls in classmethod
    "ANN401",  # flake8-annotations: Any
    "COM812",  # Trailing comma missing
    "D203",  # 1 blank line required before class docstring: incompatible with D211 (=no blank line required)
    "D212",   # multi-line-summary-first-line incompatible with D213 (=should start at second line)
    "DTZ005",  # timezone-naive datetime
    "E402",  # Module level import not at top of file (covert by ISORT)
    "ISC001",  # single-line-implicit-string-concatenation (due to conflict with ruff formater)
    "PLC0415",  # `import` should be at the top-level of a file
    "S301",  # suspicious-pickle-usage
    "TD002",  # Missing author in To-Do
    "TD003",  # Missing issue link on the line following a To-Do
]
lint.ignore-init-module-imports = true  # void automatically removing unused imports in __init__.py
respect-gitignore = true  # files and folder ignored in gitignore are ignore by ruff as well [default: true]
src = ["src/ut", "src/notebooks", "src/tests"]
# Exclude a variety of commonly ignored directories.
include = ["*.py", "*.pyi", "**/pyproject.toml"]
#extend-exclude = []
line-length = 119 # Same as flake8 and black
target-version = "py38" # assume Python 3.8 - 3.12
output-format = "concise"  # "grouped"  # default : "text"
preview = true  # true: Ruff will use unstable rules and fixes; default: false

[tool.ruff.lint.extend-per-file-ignores]
# Ignore specific rules in specific files
"__init__.py" = ["F401", "D104"]
"*.ipynb" = ["D100"]  # ignore docsstring in notebooks
"src/tests/*.py" = [
    "S101",  # ignore assert statements in tests
    "PLR2004",  # ignore "magic" value definition
    "PLC2701",  # private name import (_foo) is ok in tests
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-none-returning = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.isort]
known-local-folder = ["src/ut"]
# known-first-party = ...

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds x.
max-complexity = 12  # default x: 10

[tool.ruff.lint.pep8-naming]
ignore-names = []  # fill with specific class, function, variable names

[tool.ruff.lint.pydocstyle]
# convention = "google"  # "numpy", "pep257"

[tool.ruff.lint.pylint]
max-args = 7  # default: 5
max-branches = 13  # default: 12
max-returns = 6  # default: 6
max-statements = 50  # default: 50
# allow-magic-value-types = ["int"]

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.11.3
    color = true
    rootdir = "."
    isolated_build = true
    envlist = py{38,312}, lint

    [testenv]
    desciption = Run tests with pytest
    skip_install = false
    deps =
        pytest>=7.4.2
        python-dotenv==1.0.0
    commands =
        pytest . -k "not test_browse_files and not test_check_executor and not test_free_memory"

    [testenv:lint]
    description = "Run linters with ruff"
    skip_install = false
    deps =
        ruff>=0.1.6
    commands =
        ruff .
"""

# For instance, run in shell: bumpver update --patch --no-fetch --dry
[tool.bumpver]
current_version = "0.1.0"
version_pattern = "MAJOR.MINOR.PATCH"
pre_commit_hook = "scripts/badge.sh"
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = ['^version = "{version}"', '^current_version = "{version}"']
"README.md" = ['version-v.{version}']
"src/ut/__init__.py" = ['^__version__ = "{version}"']
